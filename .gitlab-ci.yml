variables:
  TF_VER: "1.8.5"
  AWS_DEFAULT_REGION: "eu-west-3"
  TF_WORKDIR: "infra"

stages: [fmt, plan, apply, deploy, destroy]

############################
# Terraform template (shared)
############################
.default_tf:
  image:
    name: hashicorp/terraform:${TF_VER}
    entrypoint: [""]
  before_script:
    - terraform -chdir=${TF_WORKDIR} init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="dynamodb_table=${TF_STATE_DDB_TABLE}" -backend-config="region=${AWS_DEFAULT_REGION}"

fmt:
  extends: .default_tf
  stage: fmt
  script:
    - terraform fmt -check -recursive

plan:
  extends: .default_tf
  stage: plan
  script:
    - terraform validate
    - terraform plan -out=tfplan
  artifacts:
    paths: [tfplan]

apply:
  extends: .default_tf
  stage: apply
  script: |
    terraform apply -auto-approve tfplan
    terraform output -json > tf.json
    jq -r 'to_entries|map("TFOUT_\(.key|ascii_upcase)=\(.value.value)")|.[]' tf.json > tf.env
  artifacts:
    reports:
      dotenv: tf.env
  when: manual

############################
# Deploy Navidrome
############################
deploy:
  stage: deploy
  needs: [apply]
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - echo "$SSH_KEY" > id_rsa && chmod 600 id_rsa
    - ssh-keyscan -H "$TFOUT_WLZ_IP" >> ~/.ssh/known_hosts
  script: |
    scp -i id_rsa app/navidrome.toml ec2-user@$TFOUT_WLZ_IP:/tmp/
    ssh -i id_rsa ec2-user@$TFOUT_WLZ_IP <<'EOF'
      sudo mv /tmp/navidrome.toml /opt/navidrome/
      sudo chown navidrome:navidrome /opt/navidrome/navidrome.toml
      sudo systemctl restart navidrome
    EOF
  when: manual

############################
# Tear down everything
############################
destroy:
  stage: destroy
  image:
    name: hashicorp/terraform:${TF_VER}
    entrypoint: [""]
  before_script:
    - terraform -chdir=${TF_WORKDIR} init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="dynamodb_table=${TF_STATE_DDB_TABLE}" -backend-config="region=${AWS_DEFAULT_REGION}"
  script:
    - terraform destroy -auto-approve
  when: manual
  allow_failure: false

stages:
  - fmt
  - plan
  - build         # docker image
  - deploy        # terraform apply + ssh deploy

variables:
  TF_VER: "1.8.5"
  TF_WORKDIR: "."          # root of repo

.default_tf:
  image: hashicorp/terraform:${TF_VER}
    entrypoint: [""]               #  ← add this line
  before_script:
    - cd "$TF_WORKDIR"
    - terraform --version
    # init with remote-state backend values from CI vars
    - >
      terraform init -backend-config="bucket=${TF_STATE_BUCKET}"
                    -backend-config="dynamodb_table=${TF_STATE_DDB_TABLE}"
                    -input=false

fmt:
  extends: .default_tf
  stage: fmt
  script:
    - terraform fmt -check -recursive

plan:
  extends: .default_tf
  stage: plan
  script:
    - terraform validate
    - terraform plan -input=false -out=tfplan
  artifacts:
    paths: [ "$TF_WORKDIR/tfplan" ]
    expire_in: 1 week

apply:
  extends: .default_tf
  stage: deploy
  script:
    - terraform apply -input=false tfplan
  dependencies: [ plan ]
  when: manual
  environment:
    name: dev
    url: https://$CI_PROJECT_NAMESPACE.gitlab.io/$CI_PROJECT_NAME
  only:
    - main          # protect apply to main branch

# ---- Docker build & push ----
docker_build:
  stage: build
  image: docker:latest
  services: [ docker:dind ]
  variables:
    DOCKER_BUILDKIT: "1"
  before_script:
    # ECR login
    - apk add --no-cache python3 py3-pip jq
    - |
      aws ecr get-login-password --region eu-west-3 | \
      docker login --username AWS --password-stdin $(echo $ECR_REPO_URI | cut -d/ -f1)
  script:
    - docker build -t $ECR_REPO_URI:$CI_COMMIT_SHORT_SHA ./docker
    - docker push $ECR_REPO_URI:$CI_COMMIT_SHORT_SHA
  only:
    - main

# ---- Remote deploy of latest image ----
ssh_deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh sshpass
    # prepare private key
    - 'echo "$SSH_KEY" > id_rsa && chmod 600 id_rsa'
  script: |
    LATEST_TAG=$(echo $CI_COMMIT_SHORT_SHA)
    ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@${WLZ_IP} \
      "docker pull $ECR_REPO_URI:$LATEST_TAG && \
       docker stop \$(docker ps -q) || true && \
       docker run -d -p 80:3000 $ECR_REPO_URI:$LATEST_TAG"
  only:
    - main
  needs: [ docker_build ]

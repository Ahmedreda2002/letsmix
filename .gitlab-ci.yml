variables:
  TF_VER: "1.8.5"
  TF_WORKDIR: "."

stages: [fmt, plan, build, deploy]

.default_tf:
  image: hashicorp/terraform:${TF_VER}
  entrypoint: [""]
  before_script:
    - terraform -chdir=${TF_WORKDIR} init \
        -backend-config="bucket=${TF_STATE_BUCKET}" \
        -backend-config="dynamodb_table=${TF_STATE_DDB_TABLE}" \
        -input=false

fmt:
  extends: .default_tf
  stage: fmt
  script: terraform fmt -check -recursive

plan:
  extends: .default_tf
  stage: plan
  script:
    - terraform validate
    - terraform plan -out=tfplan
  artifacts:
    paths: [tfplan]
    expire_in: 1 week

apply:
  extends: .default_tf
  stage: deploy      # Terraform deploy
  script: terraform apply -auto-approve tfplan
  dependencies: [plan]
  when: manual

docker_build:
  stage: build       # Docker image build â†’ ECR
  image: docker:latest
  services: [docker:dind]
  variables:
    DOCKER_BUILDKIT: "1"
  before_script:
    - apk add --no-cache python3 py3-pip jq
    - pip install --no-cache-dir awscli==2.*
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION |
      docker login --username AWS --password-stdin $(echo $ECR_REPO_URI | cut -d/ -f1)
  script:
    - docker build -t $ECR_REPO_URI:$CI_COMMIT_SHORT_SHA ./docker
    - docker push $ECR_REPO_URI:$CI_COMMIT_SHORT_SHA
  only: [main]

ssh_deploy:
  stage: deploy      # Pull latest image on the WLZ EC2
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh sshpass
    - echo "$SSH_KEY" > id_rsa && chmod 600 id_rsa
  script: |
    set -e
    LATEST_TAG="$CI_COMMIT_SHORT_SHA"
    ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@$WLZ_IP "
      docker pull $ECR_REPO_URI:$LATEST_TAG &&
      (docker stop \$(docker ps -q) || true) &&
      docker run -d --restart unless-stopped -p 80:3000 $ECR_REPO_URI:$LATEST_TAG"
  needs: [docker_build]
  only: [main]
